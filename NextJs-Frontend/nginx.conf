server {
    listen 80;
    server_name localhost;

    # Define the root directory for all location blocks
    root /usr/share/nginx/html;

    # MIME types for various file extensions
    include /etc/nginx/mime.types;

    # Error pages
    error_page 404 /404.html;
    location = /404.html {
        internal;
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        internal;
    }

    # Serve static files for the main site
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Serve static files for the _next folder
    location /_next/ {
        try_files $uri $uri/ =404;
    }

    # Proxy pass for API requests
    location /api {
        proxy_pass http://ChatAppDotNetBackend:5001/api;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Proxy pass for chathub
    location /chathub {
        proxy_pass http://ChatAppDotNetBackend:5001/chathub;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Proxy pass for swagger
    location /swagger {
        proxy_pass http://ChatAppDotNetBackend:5001/swagger;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    location /proxy/ {
        if ($arg_url ~* "^https?://(.*)") {
            set $upstream $arg_url;
            set $upstream_host $1;
        }

        if ($upstream = '') {
            return 400 "url parameter is required";
        }

        resolver 8.8.8.8;

        proxy_pass $upstream;

        proxy_set_header Host $upstream_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept';
    }

    # CORS and Cache headers for images
    location ~* \.(jpg|jpeg|png|gif|ico|svg)$ {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept';
        add_header Cache-Control "public, max-age=31536000";
    }

    # Cache headers for CSS and JS
    location ~* \.(css|js)$ {
        add_header Cache-Control "public, max-age=31536000";
    }
}